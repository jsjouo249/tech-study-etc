몽고DB 
데이터를 JSON형식으로 저장

문서 지향적 DB로
문서는 Key-Value의 쌍으로 생각하면 되며,

자동 sharding 지원 
ㄴ sharding : 분산 저장하여 관리하는 것을 칭하며, 데이터를 빠르게 검증할 수 있고, 빠른 트랜잭션 속도를 가질 수 있다. 하지만, 한 샤드 내에서의 전송은 빠르지만, 여러 샤드 간의 전송은 복잡하고 느림.

secondary Index 기능 발달

Embedded Document, Array 필드도 인덱싱 가능

각 데이터는 각각의 document(문서)
ㄴ데이터마다 구조가 달라도 됨 - json형식이기 때문.

예시)
{
	"_id":ObjectId("231asdwqeqw"),
	"name":"jo",
	"age":"20"
}

_id 필드가 고유 키 역할을 수행함.
ㄴ 명시적으로 입력하지 않으면, ObjectID 객체 값이 자동 부여
ㄴ 명시적으로 입력하면 입력한 값이 부여되지만, 유일성이 확보되지 않은 경우는 입력 불가

update 시 주의사항
문서 지향 db는 원자적 트랜잭션이기 때문에, 원자적 업데이트 실행
여러 건의 내용 수정 시, multi:true 옵션
내부적으로 문서 전체 치환이 일어나 성능 떨어짐 - 특정 필드만 업데이트 시, 제한자 사용 ( $set, $inc, $addToSet, $push, $pop, $pull )

delete 시 주의사항
remove = 조건에 부합되는 데이터만 삭제하며, 인덱스와 컬렉션은 유지
drop = collection의 secondary Index까지 삭제

조회조건이 null인 경우는 필드가 존재하지 않아도 조회하기 때문에, $exists 제한자 사용
like 구문이 없어서 정규식으로 쿼리 작성

Map/Reduce
이전 단계의 결과물이 다음 단계의 입력이 되게 하며,
샤드 키로 집계된 키를 이용하여 집계를 수행하면 성능 향상
분산된 reduce를 위해 샤드는 필수

실시간 집계 기능 지원
ㄴ pipeline 순서대로 처리하며, 이전 처리 결과는 다음 pipeline의 입력물로 되어 값 전달



MongoDB document 패턴
1:1

1:N
1-1. embedded 방식 : 부모객체 내에서 자식객체가 다시 정의됨 => 한번에 필요한 정보를 가져옴
{
부모 정보
  [
   { },
   { }
  ]
}

1-2. link 방식 : 연결된 값을 기준으로 데이터 생성 => 데이터 일관성을 유지할 수 있지만, 한번에 정보를 가져올 수 없음 ( join 기능의 부재)
{ 1, 음식, "콜라, 사이다" }
{ 101, "콜라", "2500원"}
{ 102, "사이다", "2500원" }

N:M
배열 키를 이용하여 조인의 역할을 수행.

Tree
보통 link형식으로 만들며, 특정 노드를 검색할 일이 빈번한 경우에 유용하다.
조상과 부모의 정보를 함께 저장하여 검색의 편리성을 가져오지만, node의 위치 변환 시, 변경 요소 많아짐.




모델링 기법
비정규화
집합

고려 사항
1. 데이터와 비즈니스 중심 설계
ㄴ어플리케이션의 쿼리 중심 설계, 비즈니스의 요규사항에 맞춰서

2. Embedded와 link방식 사용
embedded	: 읽기 속도가 향상되지만, 업데이트가 자주 일어나면 권장하지 않음.
link		: 데이터의 일관성이 중요한 경우에 사용되지만, 구조나 쿼리가 복잡해짐 

성능향상을 위해
데이터의 insert, update, select의 우선도를 파악해야 함  


몽고DB의 lock 형태
수준
Global		: 모든 DB를 잠금
Database		: 해당 데이터베이스 잠금
Collection	: collection수준의 잠금
Document	: 특정 document만 잠금

모드
Shared(R)		: 공유 잠금 (읽기 잠금)
Exclusive(W)	: 배타적 잠금 (쓰기 잠금) 변경 중인 데이터를 읽는 것도 허용 불가
Intent Shared(r)	: 컬렉션이나 도큐먼트 수준에서의 잠금을 적용 할 의향이 있음을 의미
Intent Exclusive(w)	: 컬렉션이나 도큐먼트 수준에서의 잠금을 적용 할 의향이 있음을 의미

읽기 잠금은 여러개의 쓰레드에서 공유하지만, 쓰기 잠금은 1개의 쓰레드만 허용하며, 항상 읽기 잠금보다 우선권을 가진다.

몽고db 공식 : https://docs.mongodb.com/manual/

