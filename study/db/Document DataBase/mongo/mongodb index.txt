mongodb index
고려할 점
1. 정확함을 높이기 위한 작은 범위의 index
2. 쓰기 작업이 많은 상황은 index의 단순함
3. 메모리 크기 - index는 데이터와 별개의 공간에 저장

Single-Key Index
단일 키 인덱스 - 일렬로 나열되어 있기 때문에, 찾는 순서는 중요치 않음 : 단일 인덱스는 오름차순의 collection 검색 = 내림차순의 collection 검색

Compound Index
복합 인덱스 - 복합 인덱스를 생성 시, 인덱스 생성 순서대로 쿼리문에 나타나야 함

Index Prefix
정의 된 인덱스의 앞 쪽부터 포함되는 부분집합의 인덱스
{ x : 1, y : 1, z : 1 }
==
{ x : 1 }
{ x : 1, y : 1 }
{ x : 1, y : 1, z : 1 }
첫 번째 인덱스로부터 순서대로 그룹 지어진 전체 인덱스의 부분 집합은 최고의 성능을 발휘 할 수 있음.

정렬 조건을 다르게 사용하기 위해선, 검색조건이 =이여야 함
검색조건이 =이 아닌 gt, gte, lt, lte등이면 인덱스 효과적이지 못함.

Intersection
인덱스 교차 - 인덱스의 작동 방식을 말하며, 단일 인덱스를 2개를 정의한 상황에서, 검색에 두개의 인덱스를 적용해서 검색
명시적으로 선언하는 것이 아니기 때문에, explain()메소드를 통해 확인해야 함. ( 작동된다면, AND_SORTED / AND_HASH )

Compound Index VS Intersection
복합 인덱스 = 정렬을 할 때, 키의 순서와 키의 정렬 방향이 중요하며, 정렬 순서는 Index Prefix를 따라야함.

Intersection = 검색 조건에 사용한 인덱스와 별개로 선언된 인덱스를 정렬 조건으로 사용할 수 없으며, 복합 인덱스에 비해 성능이 느림.



인덱스 관련 메소드
$indexStats
해당 쿼리의 인덱스의 사용 통계를 확인 가능

explain()
특정 쿼리의 수행 내역을 알려줌.
- executionStats	= 인덱스 사용 여부, 스캔한 문서들의 수, 쿼리의 수행시간
- allPlanExecution	= 쿼리 계획을 선택하는데 필요한 부분적인 실행 통계, 쿼리 계획을 선택한 이유

hint()
쿼리에 특정 인덱스를 사용하도록 하게 가능





출처 : https://blog.ull.im/engineering/2019/04/05/mongodb-indexing-strategy.html