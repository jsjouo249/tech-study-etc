about db

기본 db
데이터 중복 최소화
데이터 공유
독립성, 일관성, 무결성, 보안성 유지
데이터의 표준화
데이터간의 논리적, 물리적 독립
데이터 접근의 용이성
데이터 저장 공간 절약

DBMS = DataBase Management System
db를 조작하는 별도의 소프트웨어
ㄴRDBMS, NoSQL DBMS, IMDBMS, CDBMS



RDBMS - 관계형 모델을 기반으로하는 dbms
ㄴOracle, MySQL, MSSQL, MaridDB
테이블은 row와 column으로 이루어진 기본 데이터 저장 단위
테이블끼리 연관되어 있어 타 DBMS보다 효율적으로 데이터를 저장, 구성, 관리하기에 용이하며, 무엇보다 확장에 용이
정규화를 통해 데이터의 중복성을 최소화하며 트랜잭션 수행이 쉽다. - 너무 잦은 정규화는 과한 join을 야기
데이터의 원자성, 일관성, 고립성, 지속성 보장



NoSQL
ACID(원자성, 일관성, 고립성, 지속성)을 보장하지 않음
관계형 모델을 사용하지 않으며, 테이블간의 조인이 없음
직접 프로그래밍을 하는 등의 non-sql 인터페이스
여러 대의 db서버를 묶어 하나의 db를 구성
데이터의 스키마와 속성들을 다양하게 수용 및 동적 정의 = schema-less
db의 중단 없는 서비스와 자동 복구 지원
open-source
확장성, 가용성, 높은 성능이 대표적

종류
Key Value DB
key와 value의 쌍으로 데이터를 저장

Wide Columnar Store
Big Table DB이며, Key Value에서 발전된 형태의 Column Family 데이터 모델

Document DB
JSON, XML과 같은 Collection 데이터 모델 구조를 채택

Graph DB
오일러 그래프 이론에서 유래한 DB이며, Nodes, Relationship, Key Value 데이터 모델


	SQL 	/	NoSQL
1. 서버	SQL은 서버의 사양을 올리는 수직정 확장이 용이하며, NoSQL은 서버를 여러 대를 묶어 확장하는 수평적 확장이 용이
2. 스키마	SQL은 스키마가 고정되어 있지만, NoSQL은 유연함
2-1. 	SQL은 스키마의 변경이 쉽지 않아, 모델링 시 시간이 오래 걸리지만, NoSQL은 모델링 자체의 시간은 적음
3. 데이터	SQL은 컬럼 당 정해진 데이터 타입이 존재하지만, NoSQL은 어느 타입의 데이터든 가능
3-1.	SQL은 데이터의 ACID를 보장하지만, NoSQL은 보장하지 않음
4. 쿼리	SQL은 조인을 이용하여 여러 테이블을 이용한 복잡한 쿼리에 용이하지만, NoSQL은 테이블 간의 관계가 없어 복잡한 쿼리 사용시 불리.

SQL : 복잡한 쿼리의 사용 ( 레포트 작성이나 여러 테이블의 조인 ), 과부하의 예상,지나치게 많은 데이터가 아닌 경우, 데이터의 변경이 자주 일어나는 경우
NoSQL : 비정형데이터 - 데이터셋을 정의하기 힘든 로우데이터, 데이터의 정형보단 다양한 데이터 셋이 필요한 경우, 데이터의 변경보다는 읽기가 자주 일어나는 경우


NoSQL의 정리 - aws
https://aws.amazon.com/ko/nosql/document/