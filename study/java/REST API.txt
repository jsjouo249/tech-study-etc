REST API
REST ( REpresentational State Transfer )
웹에 존재하는 문서, 이미지, 동영상등에 고유한 URI를 부여해 자원을 정의하고 주소를 지정하는 방법론
웹의 기술과 HTTP 프로토콜을 그대로 활용하기 때문에, 웹의 장점을 활용하는 아키텍처

서버와 클라이언트가 데이터를 주고받으며,
형식은 json, xml, text, rss등이 있으며, 웹에서도 주로 쓰이는 key-value형식의 json을 주로 사용.

구성은
자원 - Resource	     - URI
행위 - Verb	     - HTTP	
표현 - Representations
으로 구성된다.

6가지의 특징이 있는데,
1. Uniform - uniform interface
    ㄴ URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행하는 아키텍처 스타일.

2. Stateless - 무상태성
     ㄴ http 프로토콜처럼 무상태성을 가지기 때문에, 단순히 api 서버에 들어오는 요청만 처리하며 불필요한 정보 관리하지 않음.

3. Cacheable - 캐시 가능
    ㄴ http 프로토콜을 따라하기 때문에, http에 존재하는 캐싱 기능 적용이 가능하다.
    ㄴ 일반적으로 조회 기능이 많이 사용되는 서비스에서 캐싱 기능을 통해 용량과 성능에서 이점을 가진다.

4. Self-descriptveness - 자체 표현 구조
    ㄴ json 형식의 데이터로, 내용을 직관적으로 이해할 수 있으며, 메시지 만으로 요청의 행위 파악 가능

5. Client - Server 구조
    ㄴ 자원이 있는 서버와 자원을 요청하는 클라이언트의 역할이 구분되어 서로간의 의존성이 줄어든다.

6. Layered System - 계층 구조
    ㄴ 다중 계층으로 구성 가능하며, 보안, 암호화 계층등을 추가해 구조상의 유연성이 가능하며, 네트워크 기반의 중간 매체사용이 가능하지만, 클라이언트는 어느 서버와 통신하는지 알 수 없어 보안성이 높다

설계 시 주의사항.
****1. URL는 정보의 자원을 표현
****2. 자원의 행위는 HTTP 메소드인 - GET, POST, PUT, DELETE로 표현 ( GET - 조회, POST - 생성, DELETE - 삭제, PUT - 수정 )
3. /는 계층 관계 나타낼 때 사용
4. 소문자 사용
5. - 사용
6. 확장자 미 기입
7. 마지막엔 / 포함 안함

1번과 2번은 무조건 기억