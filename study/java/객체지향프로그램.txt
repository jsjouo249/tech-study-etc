객체지향프로그램 : 추상화를 이용하여 객체로 생성(상태와 행위가 존재)하여 객체들간의 상호작용을 통한 로직을 구성

장점
코드 재사용에 용이 - 상속을 받거나, 객체로 되어 있어서 필요로 하는 여러 곳에 사용할 수 있음
유지보수가 쉬움 - 절차 지향 프로그램과 다르게, 해당 클래스(객체)의 변수 혹은 메소드만 수정하면 됨
모듈화

단점
처리 속도가 느림
객체가 많아질수록 용량도 커짐
설계에 시간과 노력이 필요함


객체 지향 프로그래밍 - 클래스+인스턴스, 추상화, 캡슐화, 상속, 다형성
클래스 + 인스턴스 : 클래스는 속성과 행위를 변수와 메소드로 정의한 것이며, 객체는 실제 프로그램에서 사용되는 데이터

추상화 : 프로그램에 필요한 핵심적인 개념이나 공통적인 부분을 추출하여 일반화 시키는 것 -> 필수 요소만 단순화시켜서 얻음

캡슐화 : 관련된 기능과 특성끼리 묶어서 사용 ≒ 모듈화
           데이터의 접근을 막고 숨기며, 데이터 처리 함수로 변경하게 함 - 정보 은닉
           ㄴ getter, setter함수

상속 : 상위 클래스의 메소드를 그대로 사용하거나, 해당 로직에 맞게 일부만 변경할 수 있게, 함 - 코드 재사용에 용이

다형성 : 상속과 인터페이스를 통해 이루어지며, 하나의 객체를 여러 상황에 맞게 사용 가능하게 함
ㄴ 오버라이딩 : 상위 클래스가 가지고 있는 메소드, 변수를 재정의
ㄴ 오버로딩 : 같은 이름의 함수를 여러 개 정의 후, 파라미터의 타입, 개수를 다르게 하여, 다른 메소드로 만드는 것


-------------------------------------------------------------------------------------------------------------------------------


반대 개념
절차 지향 프로그램 : 순차적인 처리 - c언어

장점
실행속도가 빠름

단점
유지보수의 어려움
실행 순서가 정해져 있음
디버깅의 어려움