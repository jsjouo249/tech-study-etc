배치 : 정기적으로 데이터를 정의한 방식으로 처리하기 위해 사용되며, 사용자와의 상호작용 없이 반복적으로 데이터를 트랜잭션 단위로 처리할 수 있게 구현된다.

스케쥴링
Scheduler / Quartz
Spring Scheduler
@EnableScheduling의 어노테이션을 붙이며
1. method는 void의 리턴타입
2. method는 파라미터를 가질 수 없음
! scheduler는 thread 1개를 동기형식으로 진행하기 때문에, 비동기식으로 하기 위해서는 @EnableAsync 어노테이션 필요 !

Quartz
라이브러리의 의존성 추가 필요
Job : 실행되는 로직이 있는 곳 - interface 구조
JobDetail : job을 실행시키기 위해 구체적인 정보를 가진 인스턴스이며, JobBuilder API로 만들 수 있음
Trigger : Job이 실행된느 실행 조건 - 특정 시간 간격등을 조정하며, Cron으로 작성 가능

! Quartz의 추가 기능
클러스터링
스케줄러나 쓰레드가 없는 경우에 대해서 후처리
jvm 종료 이벤트를 확인하여 종료를 알려주는 기능
플러그인 제공

scheduler / quartz : 확장된 기능의 차이

스프링 배치 계층 : application - batch core - batch infrastructure
application 	 : 개발자가 작성한 모든 배치 작업과 사용자 정의 코드
batch core 	 : 배치 작업을 시작하고 제어하는데 필요한 핵심 클래스들
batch infrastructure : 개발자와 어플리케이션에서 사용하는 읽기와 쓰기 및 다른 템플릿들

배치 원칙 및 가이드
1. 배치와 돌아가는 서비스는 서로 영향을 최소화해야 함
2. 직관적이고 단순하게 설계
3. 시스템 리소스의 사용을 최소화
4. 데이터의 무결성을 위해 검사 및 기록하는 코드 추가


-----------------------------------------------------------------------------------------------
배치
스프링 부트와 스프링 스케줄러를 이용하여 배치 프로젝트를 생성.
메인배치에서 크론을 이용하여 해당 시간마다 원하는 배치가 실행되게 설정.
배치를 설정하는 화면도 있기 때문에, 해당 배치의 실행 여부를 읽어와서 실행시킬지말지 메인에서 분기처리
배치 실행 시, 배치 관련 로그를 쌓기 위해, 실행 시작 시간, 총 갯수, 성공 갯수, 실패 갯수, 에러 메시지를 생성
db접근 시, try catch로 묶어 에러 처리
db접근 가능 시, 원하는 데이터 조회 후 리스트 생성
리스트에 대해 반복문으로 1건씩 처리하는데, 반복문 안의 로직을 try catch로 묶어서 db관련 에러가 생길 시, 다른 데이터들에 영향을 끼치지 않게 하며, catch에 실패 갯수와 에러 메시지 추가
반복문이 끝나면 로그에 실행 종료 시간, 총 갯수, 성공 갯수, 실패 갯수, 에러 메시지를 배치 로그 테이블에 추가